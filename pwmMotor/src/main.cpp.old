#include<motor.h>

static __IO uint32_t TimingDelay;

void Delay(uint32_t nTime) {
  TimingDelay = nTime;
  while (TimingDelay != 0)
    ;
}

void SysTick_Handler(void) {
  if (TimingDelay != 0x00) TimingDelay--;
}

void InitializeTimer() {
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

  TIM_TimeBaseInitTypeDef timerInitStructure;
  timerInitStructure.TIM_Prescaler = 65535/4;
  timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  timerInitStructure.TIM_Period = 18;
  timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  timerInitStructure.TIM_RepetitionCounter = 0;
  TIM_TimeBaseInit(TIM2, &timerInitStructure);
  TIM_Cmd(TIM2, ENABLE);
}

void InitialiseWheel1PWM() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  GPIO_InitTypeDef gpio;

  // PWM
  GPIO_StructInit(&gpio);

  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_13;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOC, &gpio);
}

void InitialiseWheel1Dir() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  GPIO_InitTypeDef gpio;

  // Direction Pin
  GPIO_StructInit(&gpio);
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_6;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &gpio);
}

void InitialiseWheel2PWM() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  GPIO_InitTypeDef gpio;

  // PWM
  GPIO_StructInit(&gpio);
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_11;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &gpio);
}

void InitialiseWheel2Dir() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  GPIO_InitTypeDef gpio;

  // Direction Pin
  GPIO_StructInit(&gpio);
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_13;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &gpio);
}

void InitialiseWheel3PWM() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  GPIO_InitTypeDef gpio;

  // PWM
  GPIO_StructInit(&gpio);
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_15;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &gpio);
}

void InitialiseWheel3Dir() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  GPIO_InitTypeDef gpio;

  // Direction Pin
  GPIO_StructInit(&gpio);
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_11;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOC, &gpio);
}

void InitialiseWheel4PWM() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  GPIO_InitTypeDef gpio;

  // PWM
  GPIO_StructInit(&gpio);
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_2;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOD, &gpio);
}

void InitialiseWheel4Dir() {
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  GPIO_InitTypeDef gpio;

  // Direction Pin
  GPIO_StructInit(&gpio);
  gpio.GPIO_Mode = GPIO_Mode_OUT;
  gpio.GPIO_Pin = GPIO_Pin_4;
  gpio.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOD, &gpio);
}

void InitialiseWheels() {
  InitialiseWheel1PWM();
  InitialiseWheel1Dir();
  InitialiseWheel2PWM();
  InitialiseWheel2Dir();
  InitialiseWheel3PWM();
  InitialiseWheel3Dir();
  InitialiseWheel4PWM();
  InitialiseWheel4Dir();
}

void wheel1Zero(){
  GPIO_WriteBit(GPIOD, GPIO_Pin_13, Bit_RESET);
  GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);
}

void wheel1(int direction, int speed) {

  
  int timerValue = TIM_GetCounter(TIM2);
  // Speed control
  if (timerValue == 5 - speed)
    GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET);
  else if (timerValue == 5)
    GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);

  // Direction control
  if (direction)
    GPIO_WriteBit(GPIOD, GPIO_Pin_13, Bit_SET);
  else
    GPIO_WriteBit(GPIOD, GPIO_Pin_13, Bit_RESET);
}

void wheel2(int direction, int speed) {
  int timerValue = TIM_GetCounter(TIM2);

  // Speed control
  if (timerValue == 5 - speed)
    GPIO_WriteBit(GPIOA, GPIO_Pin_11, Bit_SET);
  else if (timerValue == 5)
    GPIO_WriteBit(GPIOA, GPIO_Pin_11, Bit_RESET);

  // Direction control
  if (direction)
    GPIO_WriteBit(GPIOA, GPIO_Pin_13, Bit_SET);
  else
    GPIO_WriteBit(GPIOA, GPIO_Pin_13, Bit_RESET);
}

void wheel3(int direction, int speed) {
  int timerValue = TIM_GetCounter(TIM2);

  // Speed control
  if (timerValue == 5 - speed)
    GPIO_WriteBit(GPIOA, GPIO_Pin_15, Bit_SET);
  else if (timerValue == 5)
    GPIO_WriteBit(GPIOA, GPIO_Pin_15, Bit_RESET);

  // Direction control
  if (direction)
    GPIO_WriteBit(GPIOC, GPIO_Pin_11, Bit_SET);
  else
    GPIO_WriteBit(GPIOC, GPIO_Pin_11, Bit_RESET);
}

void wheel4(int direction, int speed) {
  int timerValue = TIM_GetCounter(TIM2);

  // Speed control
  if (timerValue == 5 - speed)
    GPIO_WriteBit(GPIOD, GPIO_Pin_2, Bit_SET);
  else if (timerValue == 5)
    GPIO_WriteBit(GPIOD, GPIO_Pin_2, Bit_RESET);

  // Direction control
  if (direction)
    GPIO_WriteBit(GPIOD, GPIO_Pin_4, Bit_SET);
  else
    GPIO_WriteBit(GPIOD, GPIO_Pin_4, Bit_RESET);
}

void move_forward() {
  wheel1(1, 5);
  wheel2(1, 5);
  wheel3(1, 5);
  wheel4(1, 5);
}

void turn_right() {
  wheel1(1, 5);
  wheel2(0, 0);
  wheel3(1, 5);
  wheel4(0, 0);
}

void turn_left() {
  wheel1(0, 0);
  wheel2(1, 5);
  wheel3(0, 0);
  wheel4(1, 5);
}

void move_backward() {
  wheel1(0, 5);
  wheel2(0, 5);
  wheel3(0, 5);
  wheel4(0, 5);
}

void stop() {
  wheel1(0, 0);
  wheel2(0, 0);
  wheel3(0, 0);
  wheel4(0, 0);
}

int main() {
  GPIO_InitTypeDef GPIO_InitStructure;
  // Enable Peripheral Clocks
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
  GPIO_StructInit(&GPIO_InitStructure);
  GPIO_InitStructure.GPIO_Pin =
      GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
  if (SysTick_Config(SystemCoreClock / 1000))
    while (1)
      ;
  GPIO_WriteBit(GPIOE, GPIO_Pin_9, Bit_SET);
  InitialiseWheels();
  InitializeTimer();
  wheel1Zero();
  // stop();
  Delay(1000);
  GPIO_WriteBit(GPIOE, GPIO_Pin_9, Bit_RESET);
  GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET);

  while (1) move_forward();
}
